import { useState, useEffect } from 'react';
import { Save, User, Package, FileText, Smartphone, Download, Trash2 } from 'lucide-react';
import { useBookStore } from '../stores/bookStore';

interface UserSettings {
  vintedUsername: string;
  defaultShippingCost: number;
  defaultConditionNotes: string;
  autoGenerateDescriptions: boolean;
  includeISBN: boolean;
  useEmojis: boolean;
  defaultMarkup: number;
  smokeFreeHome: boolean;
  petFreeHome: boolean;
  fastShipping: boolean;
}

const Settings = () => {
  const { books } = useBookStore();
  const [settings, setSettings] = useState<UserSettings>({
    vintedUsername: '',
    defaultShippingCost: 3.95,
    defaultConditionNotes: '',
    autoGenerateDescriptions: true,
    includeISBN: true,
    useEmojis: true,
    defaultMarkup: 20,
    smokeFreeHome: true,
    petFreeHome: false,
    fastShipping: true
  });

  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    // Load settings from localStorage
    const savedSettings = localStorage.getItem('bookListerSettings');
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
  }, []);

  const saveSettings = async () => {
    setIsSaving(true);
    try {
      localStorage.setItem('bookListerSettings', JSON.stringify(settings));
      alert('Settings saved successfully!');
    } catch (error) {
      alert('Failed to save settings');
    } finally {
      setIsSaving(false);
    }
  };

  const updateSetting = (key: keyof UserSettings, value: any) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  const exportSettings = () => {
    const data = JSON.stringify(settings, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'book-lister-settings.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  const resetSettings = () => {
    if (confirm('This will reset all settings to defaults. Continue?')) {
      const defaultSettings: UserSettings = {
        vintedUsername: '',
        defaultShippingCost: 3.95,
        defaultConditionNotes: '',
        autoGenerateDescriptions: true,
        includeISBN: true,
        useEmojis: true,
        defaultMarkup: 20,
        smokeFreeHome: true,
        petFreeHome: false,
        fastShipping: true
      };
      setSettings(defaultSettings);
      localStorage.removeItem('bookListerSettings');
    }
  };

  const clearAllData = () => {
    if (confirm('⚠️ This will DELETE ALL your books and settings! This cannot be undone. Are you absolutely sure?')) {
      if (confirm('Last chance! This will permanently delete everything. Continue?')) {
        // Clear IndexedDB
        if ('indexedDB' in window) {
          indexedDB.deleteDatabase('BookListerDB');
        }
        // Clear localStorage
        localStorage.removeItem('bookListerSettings');
        // Reset settings
        setSettings({
          vintedUsername: '',
          defaultShippingCost: 3.95,
          defaultConditionNotes: '',
          autoGenerateDescriptions: true,
          includeISBN: true,
          useEmojis: true,
          defaultMarkup: 20,
          smokeFreeHome: true,
          petFreeHome: false,
          fastShipping: true
        });
        alert('All data has been cleared. Please refresh the page.');
      }
    }
  };

  return (
    <div className="p-4 pb-20">
      <header className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Settings</h1>
        <p className="text-gray-600">
          Customize your Vinted listing preferences
        </p>
      </header>

      <div className="space-y-6">
        {/* Profile Section */}
        <section className="bg-white border border-gray-200 rounded-lg p-4">
          <div className="flex items-center mb-4">
            <User className="mr-2 text-teal-600" size={20} />
            <h2 className="text-lg font-semibold text-gray-900">Profile</h2>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Vinted Username (Optional)
              </label>
              <input
                type="text"
                value={settings.vintedUsername}
                onChange={(e) => updateSetting('vintedUsername', e.target.value)}
                placeholder="@yourusername"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500"
              />
              <p className="text-xs text-gray-500 mt-1">
                Used for cross-promotion in descriptions
              </p>
            </div>
          </div>
        </section>

        {/* Listing Defaults */}
        <section className="bg-white border border-gray-200 rounded-lg p-4">
          <div className="flex items-center mb-4">
            <Package className="mr-2 text-teal-600" size={20} />
            <h2 className="text-lg font-semibold text-gray-900">Listing Defaults</h2>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Default Markup (%)
              </label>
              <input
                type="number"
                min="0"
                max="100"
                value={settings.defaultMarkup}
                onChange={(e) => updateSetting('defaultMarkup', parseInt(e.target.value) || 0)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500"
              />
              <p className="text-xs text-gray-500 mt-1">
                Automatically add this percentage to suggested prices
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Default Condition Notes
              </label>
              <textarea
                value={settings.defaultConditionNotes}
                onChange={(e) => updateSetting('defaultConditionNotes', e.target.value)}
                placeholder="e.g., Minor shelf wear, no markings"
                rows={2}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500"
              />
            </div>
          </div>
        </section>

        {/* Description Settings */}
        <section className="bg-white border border-gray-200 rounded-lg p-4">
          <div className="flex items-center mb-4">
            <FileText className="mr-2 text-teal-600" size={20} />
            <h2 className="text-lg font-semibold text-gray-900">Description Settings</h2>
          </div>
          
          <div className="space-y-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={settings.autoGenerateDescriptions}
                onChange={(e) => updateSetting('autoGenerateDescriptions', e.target.checked)}
                className="mr-3 text-teal-600 focus:ring-teal-500"
              />
              <span className="text-gray-700">Auto-generate descriptions</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={settings.includeISBN}
                onChange={(e) => updateSetting('includeISBN', e.target.checked)}
                className="mr-3 text-teal-600 focus:ring-teal-500"
              />
              <span className="text-gray-700">Include ISBN in descriptions</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={settings.useEmojis}
                onChange={(e) => updateSetting('useEmojis', e.target.checked)}
                className="mr-3 text-teal-600 focus:ring-teal-500"
              />
              <span className="text-gray-700">Use emojis in descriptions</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={settings.smokeFreeHome}
                onChange={(e) => updateSetting('smokeFreeHome', e.target.checked)}
                className="mr-3 text-teal-600 focus:ring-teal-500"
              />
              <span className="text-gray-700">Smoke-free home</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={settings.petFreeHome}
                onChange={(e) => updateSetting('petFreeHome', e.target.checked)}
                className="mr-3 text-teal-600 focus:ring-teal-500"
              />
              <span className="text-gray-700">Pet-free home</span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={settings.fastShipping}
                onChange={(e) => updateSetting('fastShipping', e.target.checked)}
                className="mr-3 text-teal-600 focus:ring-teal-500"
              />
              <span className="text-gray-700">Fast shipping</span>
            </label>
          </div>
        </section>

        {/* App Info */}
        <section className="bg-white border border-gray-200 rounded-lg p-4">
          <div className="flex items-center mb-4">
            <Smartphone className="mr-2 text-teal-600" size={20} />
            <h2 className="text-lg font-semibold text-gray-900">App Information</h2>
          </div>
          
          <div className="space-y-3 text-sm text-gray-600">
            <div className="flex justify-between">
              <span>Total Books:</span>
              <span className="font-medium">{books.length}</span>
            </div>
            <div className="flex justify-between">
              <span>Active Books:</span>
              <span className="font-medium">{books.filter(b => !b.isArchived).length}</span>
            </div>
            <div className="flex justify-between">
              <span>Archived Books:</span>
              <span className="font-medium">{books.filter(b => b.isArchived).length}</span>
            </div>
            <div className="flex justify-between">
              <span>Total Value:</span>
              <span className="font-medium">€{books.reduce((sum, book) => sum + book.price, 0).toFixed(2)}</span>
            </div>
          </div>
        </section>

        {/* Data Management */}
        <section className="bg-white border border-gray-200 rounded-lg p-4">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Data Management</h2>
          
          <div className="space-y-3">
            <button
              onClick={exportSettings}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 text-left flex items-center"
            >
              <Download className="mr-2" size={16} />
              Export Settings
            </button>

            <button
              onClick={resetSettings}
              className="w-full px-4 py-2 border border-yellow-300 text-yellow-700 rounded-lg hover:bg-yellow-50 text-left flex items-center"
            >
              <Package className="mr-2" size={16} />
              Reset Settings to Defaults
            </button>

            <button
              onClick={clearAllData}
              className="w-full px-4 py-2 border border-red-300 text-red-700 rounded-lg hover:bg-red-50 text-left flex items-center"
            >
              <Trash2 className="mr-2" size={16} />
              Clear All Data (DANGER)
            </button>
          </div>
        </section>

        {/* Save Button */}
        <button
          onClick={saveSettings}
          disabled={isSaving}
          className="w-full bg-teal-600 text-white py-3 px-4 rounded-lg hover:bg-teal-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center"
        >
          <Save className="mr-2" size={20} />
          {isSaving ? 'Saving...' : 'Save Settings'}
        </button>
      </div>
    </div>
  );
};

export default Settings;